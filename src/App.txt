import { useCallback, useEffect, useRef, useState } from 'react';
import { useCameraKit } from './hooks/useCameraKit';
import { createImageSource, Lens } from '@snap/camera-kit';
import './App.css';

function App() {
  const { session, lenses } = useCameraKit();
  const [uploadedImage, setUploadedImage] = useState<HTMLImageElement | null>(null);
  const [selectedLens, setSelectedLens] = useState<Lens | null>(null);
  const canvasContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!session) {
      console.log('Session not available');
      return;
    }
    console.log('Session available, attempting to append live canvas');
    if (canvasContainerRef.current) {
      console.log('Canvas container found, appending live output');
      canvasContainerRef.current.appendChild(session.output.live);
    } else {
      console.log('Canvas container not found');
    }
  }, [session]);

  const handleImageUpload = useCallback((file: File) => {
    console.log('Image upload initiated');
    const reader = new FileReader();
    reader.onload = (e) => {
      console.log('FileReader onload triggered');
      const img = new Image();
      img.onload = () => {
        console.log('Image loaded successfully');
        setUploadedImage(img);
      };
      img.src = e.target?.result as string;
    };
    reader.readAsDataURL(file);
  }, []);

  useEffect(() => {
    if (!uploadedImage) {
      console.log('No uploaded image to process');
      return;
    }
    if (!session) {
      console.log('Session not available for image processing');
      return;
    }

    const applyImageSource = async () => {
      try {
        console.log('Applying image source');
        const source = createImageSource(uploadedImage, { cameraType: 'user' });
        console.log('Image source created:', source);
        await session.setSource(source);
        console.log('Image source set on session');
        if (selectedLens) {
          console.log('Applying selected lens');
          await session.applyLens(selectedLens);
        }
        session.play('live');
        console.log('Session playback started');
      } catch (error) {
        console.error('Error applying image source:', error);
      }
    };

    applyImageSource();
  }, [uploadedImage, session, selectedLens]);

  const handleLensSelect = async (lens: Lens) => {
    try {
      console.log(`Applying lens: ${lens.name}`);
      await session?.applyLens(lens);
      setSelectedLens(lens);
    } catch (error) {
      console.error('Error applying lens:', error);
    }
  };

  const handleDownload = () => {
    const canvas = session?.output.live;
    if (!canvas) {
      console.log('No canvas available for download');
      return;
    }

    console.log('Downloading image');
    const dataUrl = canvas.toDataURL('image/png');
    const link = document.createElement('a');
    link.download = 'snapchat-ar-photo.png';
    link.href = dataUrl;
    link.click();
  };

  return (
    <div className="app-container">
      <div className="canvas-container" ref={canvasContainerRef} />
      { !uploadedImage ? (
        <div className="upload-container">
          <label className="upload-button">
            ðŸ“¸ Upload Photo
            <input
              type="file"
              accept="image/*"
              hidden
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  console.log('File selected for upload');
                  handleImageUpload(file);
                }
              }}
            />
          </label>
        </div>
      ) : (
        <>
          <div className="snap-lens-scroller">
            {lenses.map((lens) => (
              <button
                key={lens.id}
                className={`snap-lens-item ${selectedLens?.id === lens.id ? 'active' : ''}`}
                onClick={() => handleLensSelect(lens)}
              >
                <img
                  src={lens.iconUrl || '/default-lens-icon.png'}
                  alt={lens.name}
                  className="snap-lens-icon"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/default-lens-icon.png';
                  }}
                />
              </button>
            ))}
          </div>
          <div className="controls">
            <button className="download-button" onClick={handleDownload}>
              ðŸ’¾ Download
            </button>
          </div>
        </>
      )}
    </div>
  );
  
}

export default App;